import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';

import 'firebase_options.dart'; // Auto-generated by FlutterFire CLI
import 'providers/auth_provider.dart';
import 'services/auth_service.dart';
import 'routes/app_routes.dart';
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'utils/constants.dart';

void main() async {
  // Ensure Flutter bindings are initialized.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase.
  // Make sure you have firebase_options.dart generated by `flutterfire configure`
  // or that you manually initialize Firebase if not using FlutterFire CLI.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // MultiProvider allows us to provide multiple objects down the widget tree.
    return MultiProvider(
      providers: [
        // Provide the AuthService instance.
        Provider<AuthService>(
          create: (_) => AuthService(),
        ),
        // ChangeNotifierProvider for AuthProvider, depends on AuthService.
        ChangeNotifierProvider<AuthProvider>(
          create: (context) => AuthProvider(context.read<AuthService>()),
        ),
      ],
      child: MaterialApp(
        title: 'Flutter Firebase Auth',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
          fontFamily: 'Inter', // Example: Using a custom font
          inputDecorationTheme: InputDecorationTheme(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8.0),
            ),
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8.0),
              ),
              padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0),
            ),
          ),
        ),
        // The initial route is determined by the AuthWrapper.
        home: const AuthWrapper(),
        // Define the app's routes.
        onGenerateRoute: AppRoutes.generateRoute,
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}

// AuthWrapper widget decides which screen to show based on authentication state.
class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    // Listen to the AuthProvider for authentication state changes.
    final authProvider = Provider.of<AuthProvider>(context);

    // Use a StreamBuilder to listen to the auth state stream from AuthService.
    // This ensures real-time updates when the auth state changes.
    return StreamBuilder(
      stream: authProvider.authStateChanges,
      builder: (context, snapshot) {
        // Show a loading indicator while checking auth state.
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }
        // If the user is authenticated, show the HomeScreen.
        if (snapshot.hasData) {
          return const HomeScreen();
        }
        // If the user is not authenticated, show the LoginScreen.
        return const LoginScreen();
      },
    );
  }
}
